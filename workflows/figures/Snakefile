import sys
sys.path.insert(0, srcdir('../..'))
import os
from lcdblib.utils import utils
from lib import common
from lib.patterns_targets import RNASeqConfig, ChIPSeqConfig

rnaseq_config = RNASeqConfig('config/config.yaml', 'config/rnaseq_patterns.yaml', workdir='../rnaseq')
chipseq_config = ChIPSeqConfig('config/config.yaml', 'config/chipseq_patterns.yaml', workdir='../chipseq')

rnaseq_refdict, rnaseq_args = common.references_dict(rnaseq_config.config)

subworkflow rnaseq:
    configfile: rnaseq_config.path
    workdir: '../rnaseq'


subworkflow chipseq:
    configfile: chipseq_config.path
    workdir: '../chipseq'


rule all:
    input:
        'figures/peak_count/peak_count.tsv',
        'figures/peaks_at_promoters/summary.txt'


rule peak_count:
    # This rule depends on *all* the peaks called by the chipseq workflow,
    # which we can get by accessing the targets of that workflow, like this:
    input: chipseq(utils.flatten(chipseq_config.targets['peaks']))
    output: 'figures/peak_count/peak_count.tsv'
    run:
        import pandas as pd
        import pybedtools
        df = []
        for i in input:
            toks = i.split('/')
            peakcaller = toks[-3]
            label = toks[-2]
            df.append(dict(peakcaller=peakcaller, label=label, count=len(pybedtools.BedTool(i))))
        pd.DataFrame(df)[['peakcaller', 'label', 'count']].to_csv(output[0], sep='\t', index=False)


rule peaks_at_promoters:
    """
    Reports a summary of how many peaks in each peak-calling run were found in
    a promoter, as well as BED files of the subsets of peaks falling in
    promoters.
    """
    input:
        # This is how we can access the references from the rnaseq workflow:
        db=rnaseq(rnaseq_refdict['dmel']['test']['gtf'] + '.db'),
        peaks=chipseq(utils.flatten(chipseq_config.targets['peaks']))
    output:
        'figures/peaks_at_promoters/summary.txt'
    script:
        'scripts/peaks_at_promoters.py'

# vim: ft=python
